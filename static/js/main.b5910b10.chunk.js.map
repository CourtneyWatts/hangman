{"version":3,"sources":["images/hangman0.svg","images/hangman1.svg","images/hangman2.svg","images/hangman3.svg","images/hangman4.svg","images/hangman5.svg","images/hangman6.svg","images/hangman7.svg","images/hangman8.svg","images/hangman9.svg","images/hangman10.svg","images/hangman11.svg","components/Hangmanword.js","components/Keyboard.js","components/Playagain.js","components/Hangman.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Hangmanword","props","state","trouble","className","this","word","Component","Keyboard","keyboard","handleClick","onClick","split","map","i","idx","clickFunction","key","Playagain","Hangman","answer","incorrectlyGuessed","guessed","handleCharacterClick","bind","handlePlayagainClick","event","target","classList","contains","add","innerText","toLowerCase","includes","console","log","setState","playAgainBtn","document","querySelector","innerHTML","Math","floor","random","words","length","nextWord","setTimeout","remove","gameLost","gameWon","incorrect","guessedCharacters","displayedWord","char","wordOnShow","class","src","images","defaultProps","hangman0","hangman1","hangman2","hangman3","hangman4","hangman5","hangman6","hangman7","hangman8","hangman9","hangman10","hangman11","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b5910b10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hangman0.6158681b.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman1.7053b647.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman2.ab2a09a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman3.d6d0631b.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman4.7681c176.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman5.e16ca258.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman6.436da02a.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman7.36a92f20.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman8.eb5eb69b.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman9.037dc3e1.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman10.74b3bd6d.svg\";","module.exports = __webpack_public_path__ + \"static/media/hangman11.33513f5a.svg\";","import React, { Component } from 'react'\nimport '../components/hangmanword.scss'\n\nclass Hangmanword extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      trouble: true\n    }\n  }\n\n  render () {\n    return (\n      <div className='Hangmanword'>\n        <ul className='word-on-show'>\n          {this.props.word}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Hangmanword\n","import React, { Component } from 'react'\nimport '../components/keyboard.scss'\n\nclass Keyboard extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      keyboard: true\n    }\n  }\n\n  render () {\n    const handleClick = this.props.onClick\n    const keys = 'abcdefghijklmnopqrstuvwxyz'.split('')\n    const keyboard = keys.map(function (i, idx, clickFunction) {\n      return <li onClick={handleClick} key={i}>{i}</li>\n    })\n    return (\n      <div className='keyboard mt-4'>\n        <ul>\n          {keyboard}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Keyboard\n","import React, { Component } from 'react';\nimport './playagain.scss'\n\nconst Playagain = (props) => {\n  return (\n    <div className='Playagain' onClick={props.onClick}>\n      <span>Play Again</span>\n    </div>\n  )\n}\n\nexport default Playagain\n","import React, { Component } from 'react'\nimport Hangmanword from './Hangmanword'\nimport Keyboard from './Keyboard'\nimport Playagain from './Playagain'\nimport '../components/hangman.scss'\nimport hangman0 from '../images/hangman0.svg'\nimport hangman1 from '../images/hangman1.svg'\nimport hangman2 from '../images/hangman2.svg'\nimport hangman3 from '../images/hangman3.svg'\nimport hangman4 from '../images/hangman4.svg'\nimport hangman5 from '../images/hangman5.svg'\nimport hangman6 from '../images/hangman6.svg'\nimport hangman7 from '../images/hangman7.svg'\nimport hangman8 from '../images/hangman8.svg'\nimport hangman9 from '../images/hangman9.svg'\nimport hangman10 from '../images/hangman10.svg'\nimport hangman11 from '../images/hangman11.svg'\n\n\nclass Hangman extends Component {\n  static defaultProps = {\n    images: [hangman0,hangman1,hangman2,hangman3,hangman4,hangman5,hangman6,hangman7,hangman8,hangman9,hangman10,hangman11],\n    words: ['Toy Story', 'Shrek', 'Ice Age', 'The Incredibles', 'Wreck It Ralph', 'Frozen', 'Inside Out', 'Brave', 'Monsters Inc', 'Antz', 'Coco', 'Puss In Boots', 'Kung Fu Panda', 'Tangled', 'Moana', 'Bolt', 'The Lego Movie', 'Finding Dory', 'Zootopia', 'The Adams Family', 'The Secret Life of Pets', 'Trolls', 'Despicable Me', 'The Lion King', 'The Little Mermaid', 'The Nightmare Before Christmas', 'The BFG']\n  }\n  constructor (props) {\n    super(props)\n    this.state = {\n      answer: 'The Secret Life of Pets',\n      incorrectlyGuessed: [],\n      guessed: []\n\n    }\n    this.handleCharacterClick = this.handleCharacterClick.bind(this)\n    this.handlePlayagainClick = this.handlePlayagainClick.bind(this)\n  }\n\n  handleCharacterClick (event) {\n    if(event.target.classList.contains('clicked')){\n      return\n    }\n    event.target.classList.add('clicked')\n    const guessed = event.target.innerText\n    if (this.state.answer.toLowerCase().split('').includes(guessed)) {\n      console.log('matching')\n      this.setState({\n        guessed: [...this.state.guessed, guessed]\n      })\n    } else {\n      this.setState({\n        incorrectlyGuessed: [...this.state.incorrectlyGuessed, guessed]\n      })\n    }\n  }\n\n  handlePlayagainClick(){\n    let playAgainBtn = document.querySelector('.Playagain')\n    if (playAgainBtn.classList.contains('active')){\n      return\n    }\n    playAgainBtn.classList.add('active')\n    playAgainBtn.innerHTML = 'Generating new word...'\n    let idx = Math.floor(Math.random()* this.props.words.length )\n    let nextWord = this.props.words[idx]\n    setTimeout(()=> {\n      playAgainBtn.classList.remove('active')\n      this.setState({\n        answer: nextWord,\n        guessed:[],\n        incorrectlyGuessed:[]\n      })\n      \n    }, 1500)\n  }\n\n  render () {\n    const incorrect = this.state.incorrectlyGuessed.length\n    const guessedCharacters = this.state.guessed\n    const displayedWord = this.state.answer.split('').map(function (char) {\n      if (guessedCharacters.includes(char.toLowerCase())) {\n        return char\n      } else if (char == ' '){\n        return ''\n      } else {\n        return '_'\n      }\n    })\n    //Game lost ? \n    let gameLost;\n    if(incorrect > 10){\n      gameLost = true    \n    }\n    //Game won ? \n    let gameWon;\n    if (!displayedWord.includes('_')){\n     gameWon = true    \n    }\n\n    const wordOnShow = displayedWord.map(function (i, idx) {\n      return <li class={i ? '' : 'space'}key={idx}>{i}</li>\n    })\n    \n    return (\n      <div className='container game Hangman mt-3'>\n        <h1 className='text-center'>Hangman</h1>\n        <div className='Hangman-image'>\n          <img src={this.props.images[incorrect]} />\n        </div>\n\n        <Hangmanword word={wordOnShow} />\n        { (gameLost || gameWon) \n            ?  <h1 className='text-center mt-3'>{gameWon ? 'You Win!' : 'You lose'}</h1>\n            : <Keyboard onClick={this.handleCharacterClick} />\n        }\n        { (gameLost || gameWon) && <Playagain onClick={this.handlePlayagainClick}/> }\n      </div>\n\n    )\n  }\n}\n\nexport default Hangman\n","import React from 'react'\nimport './App.scss'\nimport Hangman from './components/Hangman'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <div className='small-screen-text d-flex-col text-center p-5'>\n        <p>Browser window is too small</p>\n        <p className='pt-4'>Please open on a desktop browser</p>\n        <p className='pt-4'> If you are using a desktop browser, please resize your browser window</p>\n      </div>\n      <Hangman />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}